// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class CompletedLevel extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("player", Value.fromBytes(Bytes.empty()));
    this.set("level", Value.fromBytes(Bytes.empty()));
    this.set("completedAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CompletedLevel entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CompletedLevel must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CompletedLevel", id.toString(), this);
    }
  }

  static load(id: string): CompletedLevel | null {
    return changetype<CompletedLevel | null>(store.get("CompletedLevel", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get player(): Bytes {
    let value = this.get("player");
    return value!.toBytes();
  }

  set player(value: Bytes) {
    this.set("player", Value.fromBytes(value));
  }

  get level(): Bytes {
    let value = this.get("level");
    return value!.toBytes();
  }

  set level(value: Bytes) {
    this.set("level", Value.fromBytes(value));
  }

  get completedAt(): BigInt {
    let value = this.get("completedAt");
    return value!.toBigInt();
  }

  set completedAt(value: BigInt) {
    this.set("completedAt", Value.fromBigInt(value));
  }
}

export class CompletedLevelCount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CompletedLevelCount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CompletedLevelCount must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CompletedLevelCount", id.toString(), this);
    }
  }

  static load(id: string): CompletedLevelCount | null {
    return changetype<CompletedLevelCount | null>(
      store.get("CompletedLevelCount", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }
}
