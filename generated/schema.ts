// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class LevelPlayed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("level", Value.fromString(""));
    this.set("player", Value.fromString(""));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LevelPlayed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LevelPlayed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LevelPlayed", id.toString(), this);
    }
  }

  static load(id: string): LevelPlayed | null {
    return changetype<LevelPlayed | null>(store.get("LevelPlayed", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get level(): string {
    let value = this.get("level");
    return value!.toString();
  }

  set level(value: string) {
    this.set("level", Value.fromString(value));
  }

  get player(): string {
    let value = this.get("player");
    return value!.toString();
  }

  set player(value: string) {
    this.set("player", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get completedAt(): BigInt | null {
    let value = this.get("completedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set completedAt(value: BigInt | null) {
    if (!value) {
      this.unset("completedAt");
    } else {
      this.set("completedAt", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Player extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Player entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Player must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Player", id.toString(), this);
    }
  }

  static load(id: string): Player | null {
    return changetype<Player | null>(store.get("Player", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get levelsPlayed(): Array<string> {
    let value = this.get("levelsPlayed");
    return value!.toStringArray();
  }

  set levelsPlayed(value: Array<string>) {
    this.set("levelsPlayed", Value.fromStringArray(value));
  }
}

export class Level extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("factory", Value.fromBytes(Bytes.empty()));
    this.set("number", Value.fromBigInt(BigInt.zero()));
    this.set("instancesCount", Value.fromBigInt(BigInt.zero()));
    this.set("completionsCount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Level entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Level must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Level", id.toString(), this);
    }
  }

  static load(id: string): Level | null {
    return changetype<Level | null>(store.get("Level", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get factory(): Bytes {
    let value = this.get("factory");
    return value!.toBytes();
  }

  set factory(value: Bytes) {
    this.set("factory", Value.fromBytes(value));
  }

  get number(): BigInt {
    let value = this.get("number");
    return value!.toBigInt();
  }

  set number(value: BigInt) {
    this.set("number", Value.fromBigInt(value));
  }

  get instancesCount(): BigInt {
    let value = this.get("instancesCount");
    return value!.toBigInt();
  }

  set instancesCount(value: BigInt) {
    this.set("instancesCount", Value.fromBigInt(value));
  }

  get completionsCount(): BigInt {
    let value = this.get("completionsCount");
    return value!.toBigInt();
  }

  set completionsCount(value: BigInt) {
    this.set("completionsCount", Value.fromBigInt(value));
  }

  get levelsPlayed(): Array<string> {
    let value = this.get("levelsPlayed");
    return value!.toStringArray();
  }

  set levelsPlayed(value: Array<string>) {
    this.set("levelsPlayed", Value.fromStringArray(value));
  }
}
